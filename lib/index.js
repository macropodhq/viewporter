'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getScreenWidth = getScreenWidth;
exports.getScaleFactor = getScaleFactor;
exports.getElementOffset = getElementOffset;
exports.getBodyOffset = getBodyOffset;
exports.getViewportCoordinates = getViewportCoordinates;
exports.isDesktopSiteInMobileViewport = isDesktopSiteInMobileViewport;
exports.getMobileScaleFactor = getMobileScaleFactor;

function getScreenWidth() {
  // Note about orientation: on mobile devices, `screen` measurements are
  // always based on the "normal" portrait orientation, so we need to
  // use this to decide whether to use the width or height value.
  return (window.orientation || 0) / 90 % 2 === 0 ? screen.availWidth : screen.availHeight;
}

function getScaleFactor() {
  // `window.outerWidth` is `0` on iOS devices, so we'll use `screenWidth`
  // instead.
  var outerWidth = window.outerWidth || getScreenWidth();

  return window.innerWidth / outerWidth;
}

function getElementOffset(element) {
  var clientRect = element.getBoundingClientRect();

  // Returns the coordinates of the target element relative to the document
  return {
    top: Math.round(clientRect.top + window.scrollY),
    left: Math.round(clientRect.left + window.scrollX),
    width: Math.round(clientRect.width),
    height: Math.round(clientRect.height)
  };
}

function getBodyOffset() {
  // Returns the coordinates of the body element relative to the document

  var _getComputedStyle = getComputedStyle(document.body);

  var bodyPosition = _getComputedStyle.position;
  var bodyMarginTop = _getComputedStyle.marginTop;
  var bodyMarginLeft = _getComputedStyle.marginLeft;

  var _getElementOffset = getElementOffset(document.body);

  var top = _getElementOffset.top;
  var left = _getElementOffset.left;
  var width = _getElementOffset.width;
  var height = _getElementOffset.height;

  top -= bodyPosition === 'static' ? parseFloat(bodyMarginTop) : 0;
  left -= bodyPosition === 'static' ? parseFloat(bodyMarginLeft) : 0;

  return {
    top: top,
    left: left,
    width: width,
    height: height
  };
}

function getViewportCoordinates() {
  var bodyOffset = getBodyOffset();

  // Returns the absolute coordinates of the current viewport, relative to the
  // body element
  return {
    top: window.scrollY - bodyOffset.top,
    left: window.scrollX - bodyOffset.left,
    width: window.innerWidth,
    height: window.innerHeight
  };
}

function isDesktopSiteInMobileViewport() {
  // If the width of the viewport is greater than the screen's width, this is
  // (more than likely) a desktop site shown in a scaled, mobile viewport.
  // This only ever incurs false-positives when zoomed in further than 1:1.
  // (TODO: improve algorithm to detect that?)
  return window.innerWidth > getScreenWidth();
}

function getMobileScaleFactor() {
  if (!isDesktopSiteInMobileViewport()) {
    return 1;
  }

  return getScaleFactor();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sU0FBUyxjQUFjLEdBQUc7Ozs7QUFJL0IsU0FBTyxBQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUEsR0FBSSxFQUFFLEdBQUksQ0FBQyxLQUFLLENBQUMsR0FDN0MsTUFBTSxDQUFDLFVBQVUsR0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQztDQUN4Qjs7QUFFTSxTQUFTLGNBQWMsR0FBRzs7O0FBRy9CLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksY0FBYyxFQUFFLENBQUM7O0FBRXpELFNBQU8sTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Q0FDdkM7O0FBRU0sU0FBUyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7QUFDeEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7OztBQUduRCxTQUFPO0FBQ0wsT0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2hELFFBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNsRCxTQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQ25DLFVBQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7R0FDdEMsQ0FBQztDQUNIOztBQUVNLFNBQVMsYUFBYSxHQUFHOzs7MEJBRXlELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7O01BQXJHLFlBQVkscUJBQXRCLFFBQVE7TUFBMkIsYUFBYSxxQkFBeEIsU0FBUztNQUE2QixjQUFjLHFCQUExQixVQUFVOzswQkFDbEMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs7TUFBM0QsR0FBRyxxQkFBSCxHQUFHO01BQUUsSUFBSSxxQkFBSixJQUFJO01BQUUsS0FBSyxxQkFBTCxLQUFLO01BQUUsTUFBTSxxQkFBTixNQUFNOztBQUU3QixLQUFHLElBQUssWUFBWSxLQUFLLFFBQVEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUM7QUFDbkUsTUFBSSxJQUFLLFlBQVksS0FBSyxRQUFRLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQUFBQyxDQUFDOztBQUVyRSxTQUFPO0FBQ0wsT0FBRyxFQUFILEdBQUc7QUFDSCxRQUFJLEVBQUosSUFBSTtBQUNKLFNBQUssRUFBTCxLQUFLO0FBQ0wsVUFBTSxFQUFOLE1BQU07R0FDUCxDQUFDO0NBQ0g7O0FBRU0sU0FBUyxzQkFBc0IsR0FBRztBQUN2QyxNQUFNLFVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQzs7OztBQUluQyxTQUFPO0FBQ0wsT0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUc7QUFDcEMsUUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUk7QUFDdEMsU0FBSyxFQUFFLE1BQU0sQ0FBQyxVQUFVO0FBQ3hCLFVBQU0sRUFBRSxNQUFNLENBQUMsV0FBVztHQUMzQixDQUFDO0NBQ0g7O0FBRU0sU0FBUyw2QkFBNkIsR0FBRzs7Ozs7QUFLOUMsU0FBTyxNQUFNLENBQUMsVUFBVSxHQUFHLGNBQWMsRUFBRSxDQUFDO0NBQzdDOztBQUVNLFNBQVMsb0JBQW9CLEdBQUc7QUFDckMsTUFBSSxDQUFDLDZCQUE2QixFQUFFLEVBQUU7QUFDcEMsV0FBTyxDQUFDLENBQUM7R0FDVjs7QUFFRCxTQUFPLGNBQWMsRUFBRSxDQUFDO0NBQ3pCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmVlbldpZHRoKCkge1xuICAvLyBOb3RlIGFib3V0IG9yaWVudGF0aW9uOiBvbiBtb2JpbGUgZGV2aWNlcywgYHNjcmVlbmAgbWVhc3VyZW1lbnRzIGFyZVxuICAvLyBhbHdheXMgYmFzZWQgb24gdGhlIFwibm9ybWFsXCIgcG9ydHJhaXQgb3JpZW50YXRpb24sIHNvIHdlIG5lZWQgdG9cbiAgLy8gdXNlIHRoaXMgdG8gZGVjaWRlIHdoZXRoZXIgdG8gdXNlIHRoZSB3aWR0aCBvciBoZWlnaHQgdmFsdWUuXG4gIHJldHVybiAoKHdpbmRvdy5vcmllbnRhdGlvbiB8fCAwKSAvIDkwKSAlIDIgPT09IDBcbiAgICA/IHNjcmVlbi5hdmFpbFdpZHRoXG4gICAgOiBzY3JlZW4uYXZhaWxIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsZUZhY3RvcigpIHtcbiAgLy8gYHdpbmRvdy5vdXRlcldpZHRoYCBpcyBgMGAgb24gaU9TIGRldmljZXMsIHNvIHdlJ2xsIHVzZSBgc2NyZWVuV2lkdGhgXG4gIC8vIGluc3RlYWQuXG4gIGNvbnN0IG91dGVyV2lkdGggPSB3aW5kb3cub3V0ZXJXaWR0aCB8fCBnZXRTY3JlZW5XaWR0aCgpO1xuXG4gIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCAvIG91dGVyV2lkdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQpIHtcbiAgY29uc3QgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgLy8gUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHRhcmdldCBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudFxuICByZXR1cm4ge1xuICAgIHRvcDogTWF0aC5yb3VuZChjbGllbnRSZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZKSxcbiAgICBsZWZ0OiBNYXRoLnJvdW5kKGNsaWVudFJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYKSxcbiAgICB3aWR0aDogTWF0aC5yb3VuZChjbGllbnRSZWN0LndpZHRoKSxcbiAgICBoZWlnaHQ6IE1hdGgucm91bmQoY2xpZW50UmVjdC5oZWlnaHQpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9keU9mZnNldCgpIHtcbiAgLy8gUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGJvZHkgZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnRcbiAgY29uc3Qge3Bvc2l0aW9uOiBib2R5UG9zaXRpb24sIG1hcmdpblRvcDogYm9keU1hcmdpblRvcCwgbWFyZ2luTGVmdDogYm9keU1hcmdpbkxlZnR9ID0gZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KTtcbiAgbGV0IHt0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHR9ID0gZ2V0RWxlbWVudE9mZnNldChkb2N1bWVudC5ib2R5KTtcblxuICB0b3AgLT0gKGJvZHlQb3NpdGlvbiA9PT0gJ3N0YXRpYycgPyBwYXJzZUZsb2F0KGJvZHlNYXJnaW5Ub3ApIDogMCk7XG4gIGxlZnQgLT0gKGJvZHlQb3NpdGlvbiA9PT0gJ3N0YXRpYycgPyBwYXJzZUZsb2F0KGJvZHlNYXJnaW5MZWZ0KSA6IDApO1xuXG4gIHJldHVybiB7XG4gICAgdG9wLFxuICAgIGxlZnQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRDb29yZGluYXRlcygpIHtcbiAgY29uc3QgYm9keU9mZnNldCA9IGdldEJvZHlPZmZzZXQoKTtcblxuICAvLyBSZXR1cm5zIHRoZSBhYnNvbHV0ZSBjb29yZGluYXRlcyBvZiB0aGUgY3VycmVudCB2aWV3cG9ydCwgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIGJvZHkgZWxlbWVudFxuICByZXR1cm4ge1xuICAgIHRvcDogd2luZG93LnNjcm9sbFkgLSBib2R5T2Zmc2V0LnRvcCxcbiAgICBsZWZ0OiB3aW5kb3cuc2Nyb2xsWCAtIGJvZHlPZmZzZXQubGVmdCxcbiAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Rlc2t0b3BTaXRlSW5Nb2JpbGVWaWV3cG9ydCgpIHtcbiAgLy8gSWYgdGhlIHdpZHRoIG9mIHRoZSB2aWV3cG9ydCBpcyBncmVhdGVyIHRoYW4gdGhlIHNjcmVlbidzIHdpZHRoLCB0aGlzIGlzXG4gIC8vIChtb3JlIHRoYW4gbGlrZWx5KSBhIGRlc2t0b3Agc2l0ZSBzaG93biBpbiBhIHNjYWxlZCwgbW9iaWxlIHZpZXdwb3J0LlxuICAvLyBUaGlzIG9ubHkgZXZlciBpbmN1cnMgZmFsc2UtcG9zaXRpdmVzIHdoZW4gem9vbWVkIGluIGZ1cnRoZXIgdGhhbiAxOjEuXG4gIC8vIChUT0RPOiBpbXByb3ZlIGFsZ29yaXRobSB0byBkZXRlY3QgdGhhdD8pXG4gIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+IGdldFNjcmVlbldpZHRoKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2JpbGVTY2FsZUZhY3RvcigpIHtcbiAgaWYgKCFpc0Rlc2t0b3BTaXRlSW5Nb2JpbGVWaWV3cG9ydCgpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gZ2V0U2NhbGVGYWN0b3IoKTtcbn1cbiJdfQ==